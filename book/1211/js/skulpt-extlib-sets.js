// External library: mnozicaTabelaElementov.py
Sk.builtinFiles["files"]["src/lib/mnozicaTabelaElementov.py"] = "# Implementacija množice s tabelo elementov\n\n# Vrne prazno množico.\ndef Ustvari():\n  return []\n\n# Vrne True, če je podani element prisoten v\n# podani množici, sicer pa vrne False.\ndef JePrisoten(mnozica, element):\n  for x in mnozica:\n    if x == element:\n      return True\n  return False\n\n# Doda podani element v podano množico.\ndef Dodaj(mnozica, element):\n  if not JePrisoten(mnozica, element):\n    mnozica.append(element)\n\n# Odstrani podani element iz podane množice.\ndef Odstrani(mnozica, element):\n  if JePrisoten(mnozica, element):\n    mnozica.remove(element)\n\n# Vrne niz, ki predstavlja podano množico;\n# npr. '{1, 2, 3}' za množico, ki vsebuje\n# elemente 1, 2 in 3.\ndef NizElementov(mnozica):\n  # Med sprehodom po tabeli elemente pretvarjamo\n  # v nize in nastale nize dodajamo v tabelo.\n  izpis = []\n  for element in mnozica:\n    izpis.append(str(element))\n\n  # Združimo nize iz tabele\n  # (npr. ['a', 'b', 'c']  --> '{a, b, c}').\n  return ('{' + ', '.join(izpis) + '}')\n\n# Ta funkcija se pokliče, če modul uporabimo\n# kot samostojen program. Funkcija preizkusi\n# delovanje posameznih funkcij modula.\ndef main():\n  t = [5, 2, 5, 5, 1, 6, 8, 3, 2, 3]\n  print('Ustvarjam prazno množico m ...')\n  m = Ustvari()\n  for element in t:\n    print('Dodajam element %s ...' % element)\n    Dodaj(m, element)\n\n  print('Množica m: %s' % NizElementov(m))\n  print('JePrisoten(m, 3): %s' % JePrisoten(m,3))\n  print('JePrisoten(m, 5): %s' % JePrisoten(m,5))\n  print('JePrisoten(m, 6): %s' % JePrisoten(m,6))\n  print('JePrisoten(m, 7): %s' % JePrisoten(m,7))\n  print('Odstranjujem element 3 ...')\n  Odstrani(m, 3)\n  print('JePrisoten(m, 3): %s' % JePrisoten(m,3))\n  print('Množica m: %s' % NizElementov(m))\n\n# Spomnimo se: s sledečima vrsticama dosežemo,\n# da lahko modul uporabljamo tudi kot samostojen\n# program.\nif __name__ == '__main__':\n  main()";

// External library: mnozicaTabelaLogicnih.py
Sk.builtinFiles["files"]["src/lib/mnozicaTabelaLogicnih.py"] = "# Implementacija množice s tabelo logičnih\n# vrednosti\n\n# Vrne prazno množico, ki lahko vsebuje kvečjemu\n# števila od 0 do vključno Z - 1.\ndef Ustvari(Z):\n  # Na sledeči način najlažje ustvarimo tabelo,\n  # sestavljeno iz Z elementov False.\n  return [False] * Z\n\n# Vrne True, če je podani element prisoten v\n# podani množici, sicer pa vrne False.\ndef JePrisoten(mnozica, element):\n  return mnozica[element]\n\n# Doda podani element v podano množico.\ndef Dodaj(mnozica, element):\n  mnozica[element] = True\n\n# Odstrani podani element iz podane množice.\ndef Odstrani(mnozica, element):\n  mnozica[element] = False\n\n# Vrne niz, ki predstavlja podano množico;\n# npr. '{1, 2, 3}' za množico, ki vsebuje\n# elemente 1, 2 in 3.\ndef NizElementov(mnozica):\n  # Elementi množice so sestavljeni iz indeksov\n  # vseh elementov z vrednostjo True.\n  izpis = []\n  for indeks in range(len(mnozica)):\n    if mnozica[indeks]:\n      izpis.append(str(indeks))\n\n  # Združimo nize iz tabele in niz izpišemo.\n  return ('{' + ', '.join(izpis) + '}')\n\ndef main():\n  razpon = 20\n  s = 'Množica lahko vsebuje števila od 0 do %s.'\n  print(s % (razpon - 1))\n  t = [5, 2, 5, 5, 1, 6, 8, 3, 2, 3]\n  print('Ustvarjam prazno množico m ...')\n  m = Ustvari(razpon)\n  for element in t:\n    print('Dodajam element %s ...' % element)\n    Dodaj(m, element)\n\n  print('Množica m: %s' % NizElementov(m))\n  print('JePrisoten(m, 3): %s' % JePrisoten(m,3))\n  print('JePrisoten(m, 5): %s' % JePrisoten(m,5))\n  print('JePrisoten(m, 6): %s' % JePrisoten(m,6))\n  print('JePrisoten(m, 7): %s' % JePrisoten(m,7))\n  print('Odstranjujem element 3 ...')\n  Odstrani(m, 3)\n  print('JePrisoten(m, 3): %s' % JePrisoten(m,3))\n  print('Množica m: %s' % NizElementov(m))\n\n# Spomnimo se: s sledečima vrsticama dosežemo,\n# da lahko modul uporabljamo tudi kot samostojen\n# program.\nif __name__ == '__main__':\n  main()";

// External library: mnozicaIskalnoDrevo.py
Sk.builtinFiles["files"]["src/lib/mnozicaIskalnoDrevo.py"] = "# Implementacija množice z dvojiškim iskalnim\n# drevesom.\n\n# Vrne prazno množico.\ndef Ustvari():\n  return [[0, 0]]\n\n# Vrne True, če je podani element prisoten v\n# podani množici, sicer pa vrne False.\ndef JePrisoten(mnozica, element):\n  # Pričnemo v korenu drevesa.\n  iVozlisca = mnozica[0][1]\n\n  # Vsakokrat se pomaknemo v levega oziroma\n  # desnega naslednika trenutnega vozlišča,\n  # odvisno od elementa v trenutnem vozlišču.\n  while iVozlisca > 0 and mnozica[iVozlisca][0] != element:\n    if element < mnozica[iVozlisca][0]:\n      iVozlisca = mnozica[iVozlisca][1]\n    else:\n      iVozlisca = mnozica[iVozlisca][2]\n\n  # Postopek se lahko zaključi v vozlišču, ki\n  # vsebuje element, ali pa pri indeksu 0\n  # (v tem primeru vemo, da drevo ne vsebuje\n  # iskanega elementa).\n  return (iVozlisca > 0)\n\n# Doda podani element v podano množico.\ndef Dodaj(mnozica, element):\n  if mnozica[0][0] == 0:\n    # poseben primer: dodajanje v prazno drevo\n    iDodanegaVozlisca = len(mnozica)\n    mnozica.append([element, 0, 0])\n    mnozica[0][1] = iDodanegaVozlisca\n    mnozica[0][0] += 1\n    return\n\n  # Poiščemo indeks vozlišča, na katerega bomo\n  # povezali novo vozlišče.\n  iPredhodnika = 0\n  iVozlisca = mnozica[0][1]\n\n  while iVozlisca > 0:\n    iPredhodnika = iVozlisca\n    if element == mnozica[iVozlisca][0]:\n      # Element v drevesu že obstaja, zato\n      # predčasno končamo.\n      return\n    elif element < mnozica[iVozlisca][0]:\n      iVozlisca = mnozica[iVozlisca][1]\n    else:\n      iVozlisca = mnozica[iVozlisca][2]\n\n  # Novo vozlišče dodamo na konec tabele, ki\n  # predstavlja drevo, in ga povežemo z njegovim\n  # predhodnikom.\n  iDodanegaVozlisca = len(mnozica)\n  mnozica.append([element, 0, 0])\n\n  if element > mnozica[iPredhodnika][0]:\n    # Novo vozlišče postane desni naslednik\n    # svojega predhodnika.\n    mnozica[iPredhodnika][2] = iDodanegaVozlisca\n  else:\n    # Novo vozlišče postane levi naslednik\n    # svojega predhodnika.\n    mnozica[iPredhodnika][1] = iDodanegaVozlisca\n\n  # število elementov v drevesu se poveča za 1.\n  mnozica[0][0] += 1\n\ndef main():\n  t = [10, 5, 15, 18, 9, 17, 12, 7]\n  print('Ustvarjam prazno množico m ...')\n  m = Ustvari()\n  for element in t:\n    print('Dodajam element %s ...' % element)\n    Dodaj(m, element)\n  print('JePrisoten(m, 5): %s' % JePrisoten(m,5))\n  print('JePrisoten(m, 3): %s' % JePrisoten(m,3))\n  print('JePrisoten(m, 9): %s' % JePrisoten(m,9))\n  print('JePrisoten(m, 8): %s' % JePrisoten(m,8))\n  print('Tabela vozlišč drevesa,')\n  print('ki predstavlja množico m:')\n  print(m)\n\nif __name__ == '__main__':\n  main()";
